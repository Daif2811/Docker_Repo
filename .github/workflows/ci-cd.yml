name: Build and Deploy

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production
      app_port:
        description: 'Application port'
        required: true
        default: '8080'
        type: string
      container_name:
        description: 'Container name'
        required: true
        default: 'my-app'
        type: string
      additional_env_vars:
        description: 'Additional environment variables (KEY1=value1,KEY2=value2)'
        required: false
        type: string

env:
  REGISTRY: docker.io
  IMAGE_NAME: ${{ secrets.DOCKER_HUB_USERNAME }}/your-app-name

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      image-tag: ${{ steps.meta.outputs.tags }}
      image-digest: ${{ steps.build.outputs.digest }}
    
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ secrets.DOCKER_HUB_USERNAME }}
        password: ${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      id: build
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  deploy:
    needs: build
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.event_name == 'workflow_dispatch'
    
    steps:
    - name: Set deployment variables
      id: vars
      run: |
        if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
          echo "ENVIRONMENT=${{ github.event.inputs.environment }}" >> $GITHUB_OUTPUT
          echo "APP_PORT=${{ github.event.inputs.app_port }}" >> $GITHUB_OUTPUT
          echo "CONTAINER_NAME=${{ github.event.inputs.container_name }}" >> $GITHUB_OUTPUT
          echo "ADDITIONAL_ENV_VARS=${{ github.event.inputs.additional_env_vars }}" >> $GITHUB_OUTPUT
        else
          echo "ENVIRONMENT=production" >> $GITHUB_OUTPUT
          echo "APP_PORT=8080" >> $GITHUB_OUTPUT
          echo "CONTAINER_NAME=my-app-prod" >> $GITHUB_OUTPUT
          echo "ADDITIONAL_ENV_VARS=" >> $GITHUB_OUTPUT
        fi

    - name: Deploy to server
      uses: appleboy/ssh-action@v1.0.0
      with:
        host: ${{ secrets.SERVER_HOST }}
        username: ${{ secrets.SERVER_USER }}
        key: ${{ secrets.SERVER_SSH_KEY }}
        script: |
          # Set variables
          CONTAINER_NAME="${{ steps.vars.outputs.CONTAINER_NAME }}"
          IMAGE_TAG="${{ needs.build.outputs.image-tag }}"
          APP_PORT="${{ steps.vars.outputs.APP_PORT }}"
          ENVIRONMENT="${{ steps.vars.outputs.ENVIRONMENT }}"
          ADDITIONAL_ENV_VARS="${{ steps.vars.outputs.ADDITIONAL_ENV_VARS }}"
          
          echo "Deploying to $ENVIRONMENT environment..."
          echo "Container: $CONTAINER_NAME"
          echo "Image: $IMAGE_TAG"
          echo "Port: $APP_PORT"
          
          # Login to Docker Hub
          echo "${{ secrets.DOCKER_HUB_ACCESS_TOKEN }}" | docker login -u "${{ secrets.DOCKER_HUB_USERNAME }}" --password-stdin
          
          # Pull the latest image
          docker pull $IMAGE_TAG
          
          # Stop and remove existing container if it exists
          if [ $(docker ps -aq -f name=$CONTAINER_NAME) ]; then
            echo "Stopping existing container..."
            docker stop $CONTAINER_NAME
            docker rm $CONTAINER_NAME
          fi
          
          # Prepare environment variables
          ENV_VARS=""
          if [ ! -z "$ADDITIONAL_ENV_VARS" ]; then
            IFS=',' read -ra ADDR <<< "$ADDITIONAL_ENV_VARS"
            for i in "${ADDR[@]}"; do
              ENV_VARS="$ENV_VARS -e $i"
            done
          fi
          
          # Run new container
          docker run -d \
            --name $CONTAINER_NAME \
            -p $APP_PORT:80 \
            -e ASPNETCORE_ENVIRONMENT=$ENVIRONMENT \
            $ENV_VARS \
            --restart unless-stopped \
            $IMAGE_TAG
          
          # Clean up old images (keep last 3)
          docker image prune -f
          
          # Verify deployment
          sleep 5
          if [ $(docker ps -q -f name=$CONTAINER_NAME) ]; then
            echo "✅ Deployment successful!"
            echo "Container $CONTAINER_NAME is running on port $APP_PORT"
          else
            echo "❌ Deployment failed!"
            docker logs $CONTAINER_NAME
            exit 1
          fi

  notify:
    needs: [build, deploy]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
    - name: Notify deployment status
      run: |
        if [ "${{ needs.deploy.result }}" == "success" ]; then
          echo "🎉 Deployment completed successfully!"
        else
          echo "💥 Deployment failed!"
        fi
